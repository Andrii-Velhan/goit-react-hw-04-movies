{"version":3,"sources":["components/Cast.js","components/Reviews.js","components/MovieCard.js","pages/MovieDetailsPage.js","services/apiService.js"],"names":["Cast","state","cast","error","a","console","log","movieId","this","props","match","params","Axios","get","themoviedbAPI","BASE_URL","MY_KEY","finally","window","scrollTo","top","document","documentElement","scrollHeight","behavior","response","setState","data","className","length","map","name","profile_path","character","cast_id","src","IMG_URL","defaultImage","alt","Component","Reviews","reviews","fetchReviews","then","catch","toast","message","id","author","content","MovieCard","movie","backdrop_path","genres","overview","release_date","title","vote_average","defaultProps","PropTypes","shape","string","MovieDetailsPage","loading","handleGoBack","location","history","push","from","routes","movies","fetchMovieDetails","type","onClick","exact","to","url","activeClassName","path","render","Number","component","fetchTrendingMovies","fetch","ok","json","results","filter","movieArray","media_type","Promise","reject","Error","res","fetchCast","fetchMoviesWithQuery","query"],"mappings":"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","file":"static/js/movie-details-page.628c3be7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport themoviedbAPI from '../services/apiService';\r\nimport Axios from 'axios';\r\nimport './Cast.css';\r\n// import { toast } from 'react-toastify';\r\n\r\nclass Cast extends Component {\r\n  state = {\r\n    cast: [],\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    console.log('componentDidMount');\r\n    const { movieId } = this.props.match.params;\r\n    // const { movieId } = Number(this.props.match.params.movieId);\r\n    console.log('from Cast movieId:', movieId);\r\n    // console.log(this.state.cast);\r\n\r\n    const response = await Axios.get(\r\n      `${themoviedbAPI.BASE_URL}movie/${movieId}/credits?api_key=${themoviedbAPI.MY_KEY}&language=en-US`,\r\n    ).finally(() => {\r\n      window.scrollTo({\r\n        top: document.documentElement.scrollHeight,\r\n        behavior: 'smooth',\r\n      });\r\n    });\r\n    this.setState({ ...response.data });\r\n    console.log(this.state.cast);\r\n    //==============\r\n    // themoviedbAPI\r\n    //   .fetchCast(movieId)\r\n    //   .then(results => this.setState({ cast: results.cast }))\r\n    //   .catch(error => {\r\n    //     toast.error(error.message);\r\n    //     this.setState({ error: error.message });\r\n    //   })\r\n    //   .finally(() => {\r\n    //     window.scrollTo({\r\n    //       top: document.documentElement.scrollHeight,\r\n    //       behavior: 'smooth',\r\n    //     });\r\n    //   });\r\n  }\r\n\r\n  // async componentDidUpdate(prevProps, prevState) {\r\n  //   console.log('componentDidUpdate');\r\n  //   const { movieId } = this.props.match.params;\r\n  //   console.log(movieId);\r\n\r\n  //   const response = await Axios.get(\r\n  //     `${themoviedbAPI.BASE_URL}movie/${movieId}/credits?api_key=${themoviedbAPI.MY_KEY}&language=en-US`,\r\n  //   ).finally(() => {\r\n  //     window.scrollTo({\r\n  //       top: document.documentElement.scrollHeight,\r\n  //       behavior: 'smooth',\r\n  //     });\r\n  //   });\r\n  //   this.setState({ ...response.data });\r\n  //   console.log(this.state.cast);\r\n  // }\r\n\r\n  render() {\r\n    const { cast } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <ul className=\"CastGallery\">\r\n          {cast.length > 0 ? (\r\n            cast.map(({ name, profile_path, character, cast_id }) => (\r\n              <li className=\"ImageGalleryItem\" key={cast_id}>\r\n                <img\r\n                  src={\r\n                    profile_path\r\n                      ? `${themoviedbAPI.IMG_URL}${profile_path}`\r\n                      : `${themoviedbAPI.defaultImage}`\r\n                  }\r\n                  alt={name}\r\n                />\r\n                <p>{name}</p>\r\n                <p>Character: {character}</p>\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>We don't have any cast for this movie</p>\r\n          )}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cast;\r\n","import React, { Component } from 'react';\r\nimport themoviedbAPI from '../services/apiService';\r\nimport { toast } from 'react-toastify';\r\nimport Layout from '../components/Layout';\r\n\r\nexport default class Reviews extends Component {\r\n  state = {\r\n    reviews: [],\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { movieId } = this.props.match.params;\r\n\r\n    themoviedbAPI\r\n      .fetchReviews(movieId)\r\n      .then(reviews => this.setState({ reviews }))\r\n      .catch(error => {\r\n        toast.error(error.message);\r\n        this.setState({ error: error.message });\r\n      })\r\n      .finally(() => {\r\n        window.scrollTo({\r\n          top: document.documentElement.scrollHeight,\r\n          behavior: 'smooth',\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { reviews } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <ul>\r\n          {reviews.length > 0 ? (\r\n            reviews.map(({ id, author, content }) => (\r\n              <li key={id}>\r\n                <h2>{author}</h2>\r\n                <p>{content}</p>\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>We don't have any reviews for this movie</p>\r\n          )}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport themoviedbAPI from '../services/apiService';\r\n// import './MovieCard.scss';\r\n\r\nconst MovieCard = ({ movie }) => {\r\n  const {\r\n    backdrop_path,\r\n    genres,\r\n    overview,\r\n    release_date,\r\n    title,\r\n    name,\r\n    vote_average,\r\n  } = movie;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Card Container\">\r\n        <img\r\n          src={\r\n            backdrop_path\r\n              ? `${themoviedbAPI.IMG_URL}${backdrop_path}`\r\n              : `${themoviedbAPI.defaultImage}`\r\n          }\r\n          alt={title || name}\r\n        />\r\n\r\n        <div className=\"CardInfo\">\r\n          <h1>{title || name}</h1>\r\n          {vote_average > 0 && (\r\n            <p>\r\n              <span className=\"Title\">User Score: </span>\r\n              {vote_average * 10}%\r\n            </p>\r\n          )}\r\n\r\n          {release_date && (\r\n            <p>\r\n              <span className=\"Title\">Release date: </span>\r\n              {release_date}\r\n            </p>\r\n          )}\r\n          {overview && (\r\n            <>\r\n              <h2>Overview</h2>\r\n              <p>{overview}</p>\r\n            </>\r\n          )}\r\n\r\n          {genres !== null && (\r\n            <>\r\n              <h2>Genres</h2>\r\n              <ul className=\"Genres\">\r\n                {genres.map(({ id, name }) => (\r\n                  <li key={id} className=\"GenresItem\">\r\n                    {name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nMovieCard.defaultProps = {\r\n  movie: PropTypes.shape({\r\n    backdrop_path: themoviedbAPI.defaultImage.string,\r\n  }),\r\n};\r\n\r\nMovieCard.propTypes = {\r\n  movie: PropTypes.shape({\r\n    backdrop_path: PropTypes.string,\r\n    genres: PropTypes.array,\r\n    overview: PropTypes.string,\r\n    release_date: PropTypes.string,\r\n    title: PropTypes.string,\r\n    vote_average: PropTypes.number,\r\n  }),\r\n};\r\n\r\nexport default MovieCard;\r\n","import React, { Component } from 'react';\r\nimport { Route, NavLink, Switch } from 'react-router-dom';\r\nimport Cast from '../components/Cast';\r\nimport Reviews from '../components/Reviews';\r\nimport MovieCard from '../components/MovieCard';\r\nimport themoviedbAPI from '../services/apiService';\r\n// import Axios from 'axios';\r\nimport routes from '../routes';\r\n// import Spinner from '../components/Spinner/Spinner';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass MovieDetailsPage extends Component {\r\n\tstate = {\r\n\t\tmovie: null,\r\n\t\tloading: false,\r\n\t\terror: null,\r\n\t};\r\n\r\n\tasync componentDidMount() {\r\n\t\tthis.setState({ loading: true });\r\n\t\t// console.log(Number(this.props.match.params.movieId));\r\n\r\n\t\tconst { movieId } = this.props.match.params;\r\n\t\t// const response = await Axios.get(\r\n\t\t//   `${themoviedbAPI.BASE_URL}movie/${movieId}?api_key=${themoviedbAPI.MY_KEY}&language=en-US`,\r\n\t\t// )\r\n\t\tthemoviedbAPI\r\n\t\t\t.fetchMovieDetails(movieId)\r\n\t\t\t.then(movie => this.setState({ movie }))\r\n\t\t\t.catch(error => {\r\n\t\t\t\ttoast.error(error.message);\r\n\t\t\t\tthis.setState({ error: error.message });\r\n\t\t\t})\r\n\t\t\t.finally(() => this.setState({ loading: false }));\r\n\t\t// console.log(this.state);\r\n\t}\r\n\r\n\thandleGoBack = () => {\r\n\t\tconsole.log('back!');\r\n\t\tconst { location, history } = this.props;\r\n\t\thistory.push(location?.state?.from || routes.movies);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tmovie,\r\n\t\t\tloading,\r\n\t\t} = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tclassName=\"BackButton Button\"\r\n\t\t\t\t\tonClick={this.handleGoBack}\r\n\t\t\t\t>\r\n\t\t\t\t\tBack\r\n        </button>\r\n\r\n\t\t\t\t{this.state.movie && <MovieCard movie={movie} />}\r\n\r\n\t\t\t\t<ul className=\"NavList\">\r\n\t\t\t\t\t<li className=\"NavLink-item\">\r\n\t\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\t\texact\r\n\t\t\t\t\t\t\tto={`${this.props.match.url}/cast`}\r\n\t\t\t\t\t\t\tclassName=\"NavLink\"\r\n\t\t\t\t\t\t\tactiveClassName=\"NavLink--active\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tCast\r\n            </NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"NavLink-item\">\r\n\t\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\t\texact\r\n\t\t\t\t\t\t\t// to=\"/movies/:movieId/reviews\"\r\n\t\t\t\t\t\t\tto={`${this.props.match.url}/reviews`}\r\n\t\t\t\t\t\t\tclassName=\"NavLink\"\r\n\t\t\t\t\t\t\tactiveClassName=\"NavLink--active\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tReviews\r\n            </NavLink>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t{/* <Route path=\"/movies/:movieId/cast\" component={Cast} /> */}\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath={`${this.props.match.path}/cast`}\r\n\t\t\t\t\t\trender={props => {\r\n\t\t\t\t\t\t\tconsole.log(props);\r\n\t\t\t\t\t\t\tconst movieId = Number(props.match.params.movieId);\r\n\t\t\t\t\t\t\tconsole.log(movieId);\r\n\t\t\t\t\t\t\treturn <Cast {...props} movieId={movieId} />;\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{/* <Route path=\"/movies/:movieId/reviews\" component={Reviews} /> */}\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath={`${this.props.match.path}/reviews`}\r\n\t\t\t\t\t\tcomponent={Reviews}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MovieDetailsPage;\r\n","const BASE_URL = `https://api.themoviedb.org/3/`;\nconst MY_KEY = `66acb4573ba980ae8ac5981a52e8de6b`;\nconst imgSize = 'w500';\nconst IMG_URL = `https://image.tmdb.org/t/p/${imgSize}/`;\nconst defaultImage = `${IMG_URL}wwemzKWzjKYJFfCeiB57q3r4Bcm.png`;\n// const APIaccessKeyV4auth = `eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2NmFjYjQ1NzNiYTk4MGFlOGFjNTk4MWE1MmU4ZGU2YiIsInN1YiI6IjYwMjY5MjZiZDZjMzAwMDA0MTcwYjQ1OSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VfVRytfR82QgUddj6bVVXNcEbxcj7_D2z_leUhvgTds`;\n\n// https://api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\n// ?_embed=credits\nexport function fetchTrendingMovies() {\n\tconst url = `${BASE_URL}trending/all/day?api_key=${MY_KEY}`;\n\t// const url = `${BASE_URL}/?q=${query}&page=${page}&key=${MY_KEY}&image_type_type=photo&orientation=horizontal&per_page=${PER_PAGE}`;\n\treturn fetch(url).then(response => {\n\t\tif (response.ok) {\n\t\t\treturn response\n\t\t\t\t.json()\n\t\t\t\t.then(data => data.results)\n\t\t\t\t.then(results =>\n\t\t\t\t\tresults.filter(movieArray => movieArray.media_type === 'movie'),\n\t\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new Error('Trending movies not found!'));\n\t});\n}\n\nfunction fetchMovieDetails(movieId) {\n\treturn fetch(\n\t\t`${BASE_URL}movie/${movieId}?api_key=${MY_KEY}&language=en-US`,\n\t).then(res => res.json());\n}\n\nfunction fetchCast(movieId) {\n\treturn fetch(\n\t\t`${BASE_URL}movie/${movieId}/credits?api_key=${MY_KEY}&language=en-US`,\n\t).then(res => res.json());\n}\n\nfunction fetchReviews(movieId) {\n\treturn fetch(\n\t\t`${BASE_URL}movie/${movieId}/reviews?api_key=${MY_KEY}&language=en-US&page=1`,\n\t)\n\t\t.then(res => res.json())\n\t\t.then(data => data.results);\n}\n\nfunction fetchMoviesWithQuery(query) {\n\treturn fetch(\n\t\t`${BASE_URL}search/movie?api_key=${MY_KEY}&language=en-US&query=${query}&page=1&include_adult=false`,\n\t)\n\t\t.then(res => res.json())\n\t\t.then(data => data.results);\n}\n\nconst themoviedbAPI = {\n\tfetchTrendingMovies,\n\tfetchMovieDetails,\n\tfetchCast,\n\tfetchReviews,\n\tfetchMoviesWithQuery,\n\tMY_KEY,\n\tBASE_URL,\n\tdefaultImage,\n\tIMG_URL,\n};\n\nexport default themoviedbAPI;\n"],"sourceRoot":""}